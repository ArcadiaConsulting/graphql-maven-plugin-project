schema {
	#A comment on the query
    query: MyQueryType
    mutation: AnotherMutationType
    subscription: TheSubscriptionType
}

type MyQueryType {
	withoutParameters: [Character]!
    withOneOptionalParam(character: CharacterInput): Character
    withOneMandatoryParam(character: CharacterInput!): Character
    #withOneMandatoryParamDefaultValue(nbResultat: Int! = 13): Character!
    #withTwoMandatoryParamDefaultVal(theHero: DroidInput!, num: Int = 45): Droid!
    withEnum(episode: Episode! = NEWHOPE): Character
    
    # withList return a list of Characters, matching the given list of CharacterInput.
    # The name of the first Character returned is replaced by the given firstName.
    # All ids are generated  
    withList(firstName: String!, characters: [CharacterInput]!): [Character]
    
    
    
    # error always returns an error!  (used to check the error management)
    error(errorLabel: String!): Character!
}

type AnotherMutationType {
	createHuman(human: HumanInput!): Human!
	createAllFieldCases(input: AllFieldCasesInput!): AllFieldCases!
}

type TheSubscriptionType {
	# Will be notified for each Human added to this Episode
	subscribeNewHumanForEpisode(episode: Episode!): Human!
}


enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
}

interface WithID {
    id: ID!
}

interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
}

input CharacterInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
}

interface Commented {
	nbComments: Int
    comments: [String]
}

input AllFieldCasesInput {
    id: ID!
    name: String!
    forname: String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
}

input AllFieldCasesWithIdSubtype {
    id: ID!
    name: String!
}

input AllFieldCasesWithoutIdSubtype {
    name: String!
}

type AllFieldCases {
    id: ID!
    name: String!
    forname(uppercase: Boolean = True, textToAppendToTheForname: String): String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(uppercaseName: Boolean = True, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType: AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(uppercaseName: Boolean = True, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

type AllFieldCasesWithIdSubtype {
    id: ID!
    name: String!
}

type AllFieldCasesWithoutIdSubtype {
    name: String!
}

type Human implements Character, Commented {
    id: ID!
    name: String!
    bestFriend: Character
    friends: [Character]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}


input HumanInput {
    name: String!
    bestFriend: CharacterInput
    friends: [CharacterInput]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}

type Droid implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}

input DroidInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    primaryFunction: String
}

