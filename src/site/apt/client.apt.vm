               ------------------------------------------
               GraphQL Maven Plugin (client mode)
               ------------------------------------------
               ------------------------------------------
               ------------------------------------------


Client mode usage description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%{toc}
	
* {Summary}
~~~~~~~~~~~~~~~~~~~

  The client mode makes it easy for a Java GraphQL client-side application, to execute queries/mutations/subscriptions against a GraphQL server. The graphql-maven-plugin generates all the necessary code, so that a Java application can call a GraphQL server by simply calling the relevant Java method.
  
  The plugin manages two kinds of request:
  
  * The <<Full request>>: it's actually a standard GraphQL request, that you can test within graphiql
  
  * The <<Partial request>>: you can call a java method that executes one of the queries/mutations/subscriptions defined in the schema. This java method accepts one parameter, for each parameter of this query/mutation/subscription.
  
  []
  
  It manages two way of executing the request:
  
  * The <<direct execution>>: you call the generated method with the GraphQL request (partial or full), and you receive the result into Java objects. This is simpler, but slower: for technical reasons, the plugin has two analyze the content of the request. And it will do that at each execution. The main reason for that is to allow proper deserialization of GraphQL interfaces and unions: the __typename is injected into the query, for all returned object, union and interface types.
  
  * The recommended <<prepared execution>>: 
  
    * A GraphQLRequest object is created by the application, if possible at application startup. This allows to analyze the request only once. And it avoids errors during the app execution, as all the GraphQL requests have been checked at startup.
    
    * Each GraphQL request execution is executed from this object. 
    
    * <Note: the GraphQLRequest object has been created in the 1.6 release. The prepared object was before stored into a ObjectResponse. This ObjectResponse has been maintained when used with the withQueryResponseDef Builder method, and the code that uses will continue to work. Support for other Builder method has been removed.>
    
      * <There is no plan yet to remove the ObjectResponse object and the withQueryResponseDef Builder method. But they should be avoided in new code.>

  []
  
  Both kinds of requests, and both modes of execution allows to use bind parameters into your query definitions.  

* {How it works?}
~~~~~~~~~~~~~~~~~~~

  When configuring the graphql-maven-plugin in client mode, it reads a GraphQL schema file, and generates all the necessary code to make it easy to call a GraphQL server. 

  As an overview, it generates:

  * One java class for each Query/Mutation/Subscription object. This object contains all the method allowing to execute a full query, and shortcuts methods to execute each of the queries defined in the query/mutation/subscription.
  
    * The introspection queries (__schema and __type) are added to the query defined in the GraphQL schema. If no query exists in the schema, a default one is created, named QueryType.
  
  * One POJO for each standard object of the GraphQL object
  
  * One GraphQLRequest object
  
  * All the necessary runtime is actually attached as source code into your project: the generated code is stand-alone.
  
    * So, your project, when it runs, doesn't depend on any external dependency from graphql-java-generator.
    
      * <<This is why we call it an accelerator>>: you can generate the code once, and get rid of graphql-java-generator if you wish. BTW: we think its better to continue using it! But you're free to leave, and keep the generated code. :)
      
      * You can change this default behavior, and use the runtime into an external dependency. Read the {{{./schema_personalization.html}Howto personalize the generated code}} for more information.

  []

* {How to use the plugin?}
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  First, you'll have to create or get your GraphQL schema. The GraphQL plugin expects a <.graphqls> file. 
  See the {{{https://graphql.org/learn/schema/}GraphQL schema doc}} for all the details.

  Then, add the plugin to your Maven POM file:

+--------------------------------------------------------------------------------------------
<project ...>
...

	<build>
		<plugins>
...
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<version>${lastReleasedVersion}</version>
				<executions>
					<execution>
						<goals>
							<goal>graphql</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mode>client</mode>
					<packageName>my.target.package</packageName>
				</configuration>
			</plugin>
...
			<extensions>
				<!-- Adding these extensions prevents the error below, with JDK 9 and higher: -->
				<!-- NoSuchMethodError: 'java.lang.String javax.annotation.Resource.lookup()' -->
				<extension>
					<groupId>javax.annotation</groupId>
					<artifactId>javax.annotation-api</artifactId>
					<version>1.3.2</version>
				</extension>
				<extension>
					<groupId>javax.annotation</groupId>
					<artifactId>jsr250-api</artifactId>
					<version>1.0</version>
				</extension>
			</extensions>
	
		</plugins>
	</build>
...
</project>
+--------------------------------------------------------------------------------------------

  The mode is optional, here, as client is the default one. Valid values are: <client> and <server>.

  You can define the package that will contain the generated code. If you don't, the default package is <com.generated.graphql>. 
  This package contains the generated code. 

  The necessary runtime code source is joined into the generated code, and remains in its original package, which is <com.graphql_java_generator.*>. So everything is embedded. Read the {{{./schema_personalization.html}Howto personalize the generated code}} if you want to change this default behavior.


* {Full requests versus Partial requests}
~~~~~~~~~~~~~~~~~~~

  When the plugin generates the query/mutation/subscription java classes (one for each), it generates two families of methods: Full requests, and Partial requests, as introduced on the top of this page.
  
** {Full requests}
~~~~~~~~~~~~~~~~~~~
  
  For each query/mutation/subscription in the GraphQL schema, a Java class is generated.
  
  The <exec> and <execWithBindValues> methods allows to execute full GraphQL queries, that is: the full GraphQL request, as it would work in the graphiql interface. So you can test your request in graphiql, then parse the tested request into you code, as a Full Request (see below for sample).
  
  This is interesting when:
  
  * You want to execute several queries into one call toward the server
  
  * You want to add directives to the query/mutation/subscription itself
  
  * You want to use GraphQL fragments into your query
  
  []
  
  TODO FINISH HERE 
    
  The <getResponseBuilder()> method returns a Builder that allows you to prepare the GraphQL request during the application initialization. This will accelerate the further GraphQL calls for this query/mutation/subscription. And it allows to check at startup time that your queries/mutations/subscriptions are valid.
  
  If you want/need to specify a GraphQL directive on the query/mutation/subscription itself, you must use a full query. For instance:

+--------------------------------------------------------------------------------------------
HumanInput input = new HumanInput();
..
[putting some content into input]
..
MyQueryTypeResponse resp = queryType.exec(
		"{createHuman (human: &humanInput)  @myDirective(value:&value, anotherValue: ?anotherValueParam) {id name appearsIn friends {id name}}}",
		"value", "the value", "humanInput", input);
Human human = resp.getCreateHuman();
+--------------------------------------------------------------------------------------------

  The full queries allows you to execute several queries, or several mutations, or several subscriptions in one server call. Please note that you can not mix queries and mutations in the same call. And, as the plugin currently doesn't manage aliases on the query/mutation/subscription level, you can not execute several times the same query/mutation/subscription in the same call. 
  
  For instance, this is one of the integration tests in the allGraphQLCases client project:

+--------------------------------------------------------------------------------------------
MyQueryTypeResponse resp = queryType.exec(
		"{"//
			+ " directiveOnQuery (uppercase: false) @testDirective(value:&value, anotherValue:?anotherValue)"//
			+ " withOneOptionalParam {id name appearsIn friends {id name}}"//
			+ " withoutParameters {appearsIn @skip(if: &skipAppearsIn) name @skip(if: &skipName) }"//
			+ "}",
		"value", "An expected returned string", //
		"skipAppearsIn", true, //
		"skipName", false);
List<String> directiveOnQuery = resp.getDirectiveOnQuery();
Character withOneOptionalParam = resp.getWithOneOptionalParam();
List<Character> withoutParameters = resp.getWithoutParameters();
+--------------------------------------------------------------------------------------------
  
  In this sample, you can see the use of mandatory bind variables (value and humanInput) and optional bind variables. The names and values of bind variables are given, as arguments of the method. You can also provide a map, where the keys are the bind variable names, and the values are the bind variable values. 
  
  When you execute the query, an exception is thrown if a mandatory bind variable value is missing.
  
  If an optional bind variable value is missing, then the relevant parameter is not sent to the server. In the above sample, the <anotherValueParam> is not given. So the <anotherValue> param is not sent to the server.
       
  
** {Partial requests}
~~~~~~~~~~~~~~~~~~~

  In each query/mutation/subscription object, the plugin also generates <Xxxx> and <XxxxWithBindValues> methods, where <Xxxx> is successively each query/mutation/subscription defined in this query/mutation/subscription object. 
  
  These methods allows to directly receive the result in the relevant type:

+--------------------------------------------------------------------------------------------
HumanInput input = new HumanInput();
..
[putting some content into input]
..
Human human = queryType.createHuman (
		"(value:&value, anotherValue: ?anotherValue) {id name appearsIn friends {id name}}",
		// Then we put the list of expected parameters for createHuman
		input,
		// Then the bind variables, by pair of parameters: the bind variable name, then its value
		"value", "the value", "humanInput", input);
+--------------------------------------------------------------------------------------------

  This method generates less code. 
  
  But directives can't be added on the query/mutation/subscription level. Of course, they can still be added in the given queries, that is on fields and fragments.
  
  The bind variables works as specified for the Full queries.

* {How to execute a GraphQL query?}
~~~~~~~~~~~~~~~~~~~

  When in <client> mode, you can query the server with just one line of code.

  For instance :

+--------------------------------------------------------------------------------------------
import my.target.package.Human; // my.target.package is the package name defined in the pom
import my.target.package.QueryType; // my.target.package is the package name defined in the pom

...

	QueryType queryType = new QueryType("http://my.server.com/graphql");
	Human human = queryType.human("{id name appearsIn homePlanet friends{name}}", "180");
+--------------------------------------------------------------------------------------------

  Where human is a POJO, that you can manipulate as any java object. This POJOs and the QueryType(s) have been generated at build time, 
  thanks to the plugin configured in your pom.
  
  The generated QueryType has also these constructors:

+--------------------------------------------------------------------------------------------
    public QueryType(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier)
+--------------------------------------------------------------------------------------------  

  and, with a preconfigured Jersey client instance to support customization of the rest request:

+--------------------------------------------------------------------------------------------
    public QueryType(String graphqlEndpoint, Client client, ObjectMapper objectMapper)
+--------------------------------------------------------------------------------------------  

* {GraphQL query (and mutation) calls}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You call query and mutation in the same way: by calling the relevant java method that has been generated at build time.

  The Query and the Mutation generated classes have the same name, as defined in the GraphQL schema. 
  They are generated into the package defined in your pom (see above). The standard way is to provide the URL 
  (either http or https) to the constuctor of the Query or Mutation class.

  For https server, a second constructor allows you to provide a specific SSLContext and HostnameVerifier. 
  We use it in Integration Test, to allow the client to connect to an https server with a self-signed certificate 
  (as we don't have the money to buy a proper certificate)

  Once the Query or/and the Mutation class(es) is/are created, you can call the GraphQL server. 
  Just use the instance, you created, and call the query or mutation method.

  Each such method has the same name as in the GraphQL schema. Each such method is generated twice, with two kind of parameters, 
  described just below. It returns the type indicated in the GraphQL schema. The two kind of methods are the direct query (or mutation) 
  and the prepared query (or mutation).

** {Direct Query (or Mutation) call}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The signature is of this type:

+--------------------------------------------------------------------------------------------
    Yyyy xxx(String queryResponseDef, Pppp param1, Pppp param2..)
+--------------------------------------------------------------------------------------------

  Where:
  
  * Yyyy is the type, defined in the GraphQL schema as the return type for this Query or Mutation. 
    Yyyy is actually the POJO generated by graphql-java-generator, from the GraphQL Type of the same name.
  
  * xxx is the name of the Query or Mutation
  
  * queryResponseDef is directly the GraphQL request 
  
  * param1, param2 (..) are the parameters, as defined in the GraphQL schema
  
  []

  Here is a sample, taken from the StarWars sample project:

+--------------------------------------------------------------------------------------------
    List<Board> boards = queryType.boards("{id name publiclyAvailable topics(since: \"2020-01-15\"){id}}");
+--------------------------------------------------------------------------------------------

  This is the simplest way to execute a GraphQL query. But:

  * There are some checks at each execution (to check that your parameters are valid). 
    It is more efficient to prepare the request first (see below).

  * This kind of queries <<can not manage field parameters that are Input Types (only scalars)>>
  
  * It's up to your to format the value for the field parameters

  * And you'll know if the request is valid only when you execute it 

  []

** Prepared Query (or Mutation) call
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  In this second <<and recommanded>> method, you prepare the response of the query/mutation first. 
  The idea is to build an <ObjectResponse> once, that you'll reuse for every call of this type to the server. 
  An <ObjectResponse> is actually the graphql-java-generator object created to match a query string  
  <\{id name appearsIn homePlanet friends\{name\}\}>.

  You do this once, typically when the application starts:

  * The graphql-java-generator initializes its stuff only once
  
  * You known at startup time that all your requests are valid.

      * Also, when starting an integration test, the requests are prepared ... and checked. 

  []

  There are two ways to prepare the query/mutation response:

  [[1]] The GraphQL way:
  
  []

+--------------------------------------------------------------------------------------------
(init)
		ObjectResponse boardsAndTopicsResponse = queryType.getBoardsResponseBuilder()
				.withQueryResponseDef("{id name publiclyAvailable topics(since:?sinceParam){id}}").build();
+--------------------------------------------------------------------------------------------

  Note: you can also prefix sinceParam by &, if this parameter is mandatory from a client side point of view:
		
+--------------------------------------------------------------------------------------------
(init)
		ObjectResponse boardsAndTopicsResponse = queryType.getBoardsResponseBuilder()
				.withQueryResponseDef("{id name publiclyAvailable topics(since:&sinceParam){id}}").build();
+--------------------------------------------------------------------------------------------

  Then, later in the code, you can use this prepared query:

+--------------------------------------------------------------------------------------------
		// This will set the value sinceValue to the sinceParam field parameter 
		List<Board> boards = queryType.boards(boardsAndTopicsResponse, "sinceParam", sinceValue);
+--------------------------------------------------------------------------------------------

  If your query has more than one parameter, just add the couples of name and value:

+--------------------------------------------------------------------------------------------
		List<Board> boards = queryType.boards(boardsAndTopicsResponse, "sinceParam", sinceValue, "param2", value2, "param3", value3 [...] );
+--------------------------------------------------------------------------------------------
  

  [[2]] The builder way:
  
  []
  
+--------------------------------------------------------------------------------------------
(init)
		boardsAndTopicsResponse = queryType.getBoardsResponseBuilder().withField("id").withField("name")
				.withField("publiclyAvailable").withSubObject(new Builder(Board.class, "topics")
						.withInputParameter(InputParameter.newBindParameter("since", "sinceParam", true)).build())
				.build();
+--------------------------------------------------------------------------------------------

  Here above, the sinceParam is mandatory, as the third parameter for newBindParameter is true. If you want it is not mandatory, from a client point of view,
  just change true by false when adding the InputParameter.

  Then, you can call to the method exactly as in the previous case:

+--------------------------------------------------------------------------------------------
		// This will set the value sinceValue to the sinceParam field parameter 
		List<Board> boards = queryType.boards(boardsAndTopicsResponse, "sinceParam", sinceValue);
		
		//With more than one parameter:
		List<Board> boards = queryType.boards(boardsAndTopicsResponse, "sinceParam", sinceValue, "param2", value2, "param3", value3 [...] );
+--------------------------------------------------------------------------------------------

* {Prepare your GraphQL queries}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The <ObjectResponse> is the heart of the graphql-java-generator, when in client mode. It is responsible for:

  * Defining what fields are expected in the GraphQL server response, for instance <\{id name appearsIn homePlanet friends\{name\}\}>
  
  * Check the validity of the query string at build time. That is: if the query string is invalid, 
  a GraphQLRequestPreparationException exception is thrown.
  
  * (in the near future) mark the queried fields as queried, so that calling a getter on a non-queried field result in an error 
  (instead of "believing" that this value is null). 
  
  []

* {Create an ObjectResponse with a query string}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  To prepare the queries during startup, you can initialize a local variable, like in the given samples, 
  for instance here is an extract of WithQueries, from the StarWars sample. 
  In this sample, the <heroFriendsFriendsFriends()> method executes the query and returns the GraphQL server response, 
  mapped into the relevant POJO.

+--------------------------------------------------------------------------------------------
public class WithQueries implements Queries {

	final QueryType queryType;
	ObjectResponse heroFriendsFriendsFriendsResponse;
...

	public WithQueries(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier)
			throws GraphQLRequestPreparationException {
		queryType = new QueryType(graphqlEndpoint, sslContext, hostnameVerifier);
...
		heroFriendsFriendsFriendsResponse = queryType.getHeroResponseBuilder()
				.withQueryResponseDef("{id appearsIn friends {name friends {friends{id name appearsIn}}}}").build();
...
	}

	public Character heroFriendsFriendsFriends() throws GraphQLExecutionException {
		return queryType.hero(heroFriendsFriendsFriendsResponse, Episode.NEWHOPE);
	}

}
+--------------------------------------------------------------------------------------------

* {Create an ObjectResponse with an ObjectResponse Builder}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can also use a Builder to generate the query, by adding field by field, and subobject by subobject, like below. 
  Of course, it's more verbose.

+--------------------------------------------------------------------------------------------
public class WithQueries implements Queries {

	final QueryType queryType;
	ObjectResponse heroFriendsFriendsFriendsResponse;
...

	public WithQueries(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier)
			throws GraphQLRequestPreparationException {
		queryType = new QueryType(graphqlEndpoint, sslContext, hostnameVerifier);
...
		// Equivalent to  "{id appearsIn name friends {name friends {friends{id name appearsIn}}} primaryFunction }"
		ObjectResponse friends3 = ObjectResponse.newSubObjectBuilder(Character.class).withField("id").withField("name")
				.withField("appearsIn").build();
		ObjectResponse friends2 = ObjectResponse.newSubObjectBuilder(Character.class).withSubObject("friends", friends3)
				.build();
		ObjectResponse friends1 = ObjectResponse.newSubObjectBuilder(Character.class).withField("name")
				.withSubObject("friends", friends2).build();
		heroFriendsFriendsFriendsResponse = queryType.getHeroResponseBuilder().withField("id").withField("appearsIn")
				.withSubObject("friends", friends1).build();
...
	}

	public Character heroFriendsFriendsFriends() throws GraphQLExecutionException {
		return queryType.hero(heroFriendsFriendsFriendsResponse, Episode.NEWHOPE);
	}

}
+--------------------------------------------------------------------------------------------


* {How to manager input parameters}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  graphql-java-generator manages two kind of parameters:
  
  * The query/mutation/subscription input parameters. That is, the parameters for the field of Query type, Mutation type or Subscription type. These input parameters are parsed before the code
  is generated. In the generated code, there is a method per query, mutation and subscription. This method has, as parameters, the list of input parameters defined in the GraphQL schema, for 
  this query/mutation/subscription. See below for more details.
  
  * The input parameters for field in standard GraphQL type. This input parameters are in the GraphQL query, depending on the ObjetResponse you define. So these parameters must be managed
  by you, when you define the response expected by the server. See below for more details.
  
  []


** {How to use Query/Mutation/Subscription input parameters}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  See the sample, here above (prepared queries) and these samples :
  
  * In the <graphql-maven-plugin-samples/graphql-maven-plugin-samples-Forum-client project>, 
   in the <com.graphql_java_generator.samples.forum.client.graphql.PreparedQueries> class,

    * The constructor creates the ObjectResponse objects that will be use latter, for query executions.
    
    * The <boardsSimple()> method calls a query without query parameters: there is no parameter when calling <queryType.boards(ObjectResponse)> 
    out of the ObjectResponse itself (which defines what returns is expected from the server).
    
    * The <findTopics(String boardName, List\<String\> keyword)> calls the <queryType.findTopics(findTopicIdDateTitleContent, boardName, keyword)>
    method with these parameters: the ObjectResponse, and the two parameters for the GraphQL query. 
    
      * This <queryType.findTopics(..)> method is generated by graphql-java-generator. It contains all the query/mutation/subscription parameters
      as method parameters.
      
      * If you don't want to use one of these parameters, <<just send null as a value>>, and this parameter will be ignored. Of course, if
      this parameter is mandatory, this will throw a server-side error.
      
      * It would work the same, if it was a GraphQL mutation or a GraphQL subscription, instead of a GraphQL query
    
  []



** {How to use Field input parameters, for standard GraphQL Types}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  See the sample, here above (prepared queries) and these samples :
  
  * In the graphql-maven-plugin-samples/graphql-maven-plugin-samples-Forum-client project:

    * In the <com.graphql_java_generator.samples.forum.client.PreparedQueriesWithFieldInputParametersIT> class, all the test methods use
    the ObjectResponse prepared in the <beforeAll()> method

    * Depending on the method, one parameter to three parameters are added to the parameter <map>:
    
      * <since> is added in the <beforeEach()>
      
      * The other parameters are added, or not, in their respective methods.
      
      * If a parameter is not added into the map, it will be ignored during the query build, and not sent to the GraphQL server. Of course, if
      this input parameter is mandatory, this will throw a server-side error.

  []
  
  The input parameters can be defined in several ways:
  
  * For Direct queries, it's up to you to build the query string that is sent to the server. So it's up to you to write the field input parameters in this query string, to escape and format them.
  
    * You can find such samples in the DirectQueries classes of the various client samples. Especially the Forum one.
  
  * For queries prepared with a Query String:
  
    * You defined the input parameters of your query/mutation/subscription, when you create the ObjectResponse object.

+--------------------------------------------------------------------------------------------
		// Request preparation
		String queryResponseDef = "{id name publiclyAvailable topics{id date author{id name email type} nbPosts "
				+ "posts(memberId:\"00000000-0000-0000-0000-000000000012\", memberName: ?memberName, since: &sinceParam) {date author{name email type}}}}";
		ObjectResponse response = queryType.getBoardsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
...
		// Request execution
		List<Board> boards = queryType.boards(response, "memberName", "a member Name", "sinceParam", "1900/10/24");
+--------------------------------------------------------------------------------------------

    * You can see here that you can have three kind of input parameters (here for the posts field of the Topic GraphQL object):
    
      * memberId is a hard coded value. It's a hard coded value, as the value is given while building the ObjectReponse.
      The value is stored once in the ObjectResponse, at preparation time. It can not be changed later, at execution time.
      
      * memberName is an optional bind parameter. It's optional, as the value is a string, starting with '?'. What's next of the '?' is the bind variable name. Here the bind variable has 
      the same name as the input parameter. Which is Ok.
      
      * sinceParam is a mandatory bind parameter. It's mandatory, as the value is a string, starting with '!'. What's next of the '!' is the bind variable name. Here the bind variable has 
      a name that is different from the name as the input parameter. Which is also Ok. Thus, you can have several 'since' (or any other) parameters in your query request, and you can define
      a specific bind variable for each occurrence, or you the same bind variable for all (in which case, of course, all parameters will receive the same value).
 
  []

  <<TODO : to be completed, with a sample in this doc>>




* {Use a Spring Bean}
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Instead of create a local variable for your ObjectResponse, another idea is to create a Spring Bean:

+--------------------------------------------------------------------------------------------
	@Bean
	ObjectResponse heroResponse(QueryType queryType) {
		return queryType.getHeroResponseBuilder().build();
	}
+--------------------------------------------------------------------------------------------

  Doing this allows you to use this ObjectResponse, later on, in other Spring component(s), with something like this: 

+--------------------------------------------------------------------------------------------
	@Component
	class YourClass {
	
	@Resource
	ObjectResponse heroResponse;
	
	Character hero = queryType.hero(heroResponse, Episode.NEWHOPE);
	...
}
+--------------------------------------------------------------------------------------------
