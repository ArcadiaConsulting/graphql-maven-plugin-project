# GraphQL Maven Plugin (server mode)

This project is a maven plugin, which makes it easy to work in Java with graphQL in a schema first approach.

In server mode, the graphql-maven-plugin reads a __graphqls schema__, and generated the maximum of boilerplate code. That is, it generates:

* When in a jar maven project, the main class to start a Spring Boot application
* When in a war maven project, the servlet configuration to be embedded in a war package. It can then be deployed in any standard application server
* The declaration to [graphql-java](https://www.graphql-java.com/), which is the only GraphQL dependency. It's actually mandatory for any GraphQL implementation in Java
* The DataFetcherDelegate interface declarations for all the [Data Fetchers](https://www.graphql-java.com/documentation/master/data-fetching/), which is the graphql-java word for GraphQL resolvers.
* The wiring of these Data Fetchers with the graphql-java
* The POJOs to manipulate the GraphQL objects defined in the GraphQL schema. 
    * These POJOs are annotated with JPA annotations. This allows to link them to almost any database
    * You can customize these annotations, with the Schema Personalization file (see below for details)
    * (in a near future) It will be possible to define your own code template, to generate exactly the code you want 
 
In a near future, graphql-java-generator will also provide an implementation for the dataloader, which will improve performances, see [https://github.com/graphql-java/java-dataloader](https://github.com/graphql-java/java-dataloader).

Once all this is generated, you'll have to implement the DataFetcherDelegate interfaces. The DataFetcherDelegate implementation is the only work that remains on your side. They are the link between the GraphQL schema and your data storage. See below for more details.    


## A war or a Spring Boot application

Depending on your use case, you can choose the maven packaging to jar or war. This changes the generated code. But your specific code is exactly the same. That is: __you can change the packaging at any time__, and it will still produce a ready-to-go product without any other modification from you.  

Below you'll find:

* A sample pom to start with
* The explanation about the DataFetcherDelegate interfaces you'll have to implement.

## The pom.xml file

Create a new Maven Project, with this pom, for instance :

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.3.RELEASE</version>
	</parent>

	<groupId>com.graphql-java</groupId>
	<artifactId>mytest-of-graphql-maven-plugin</artifactId>
	<version>0.1.0-SNAPSHOT</version>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<version>${lastReleasedVersion}</version>
				<executions>
					<execution>
						<goals>
							<goal>graphql</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<packageName>org.my.package</packageName>
					<mode>server</mode>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Dependencies for tests -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Dependencies for GraphQL -->
		<dependency>
			<groupId>com.graphql-java-kickstart</groupId>
			<artifactId>graphql-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.graphql-java-kickstart</groupId>
			<artifactId>graphql-java-tools</artifactId>
		</dependency>
		<dependency>
			<!-- gives a GUI to test the GraphQL request on the generated server: http://localhost:8080/graphiql -->
			<groupId>com.graphql-java-kickstart</groupId>
			<artifactId>graphiql-spring-boot-starter</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Other dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
		</dependency>
	</dependencies>
</project>
```

Take care of the two parameters of the Maven Plugin that have been set there:
* mode: as client is the default mode, you must define the mode as server, here, to generate the server code.
* __packageName__: Very important. This package is where the main code is defined. The Spring container is started from this package. 
The implementations of the Data Fetchers Delegate (see below) will be searched in this package, or in its subpackages. 
So this package must be a package that is the same, or that contains the packages where you define your implementations of Data Fetchers Delegate   

Then do a first build :
```
mvn clean install
```

The build will complain about the Data Fetchers Delegate you need to define. 

__The short story is this one__:
* The code generated by the GraphQL maven plugin directly maps to the entity, thanks to [Spring Data JPA](https://spring.io/projects/spring-data-jpa)'s magic.
* The developper still needs to develop the DataFetchers, to manage the relation between objects (see the samples and below, to see how to do this).

__A longer story is this one__:

The generated code can not be automatically adapted to all and every data model that exists, and even less all composition between local and distant data that you may have on server side. So the generated code is only the basis for what's most common to all implementations.

Then, it's up to you to map the generated POJOs to your own data model. This 'mapping', in usual cases, is more the implementation of the DataFetchersDelegates interface that have been generated. If the GraphQL schema maps well with your data model, this implementation is straightforward. It's just a matter of calling the right Spring Repository (see the forum server sample for this knd of sample).

If the GraphQL schema is really different from the data model, then you may have to implement the relevant logic to fit your data model into the GraphQL model.  

__Write the implementation for the XxxxDataFetchersDelegate__:

Basically, the plugin generates one XxxxDataFetchersDelegate interface for each object in the GraphQL schema, whether they are regular objects or query/mutation/subscription objects.

These XxxxDataFetchersDelegate interfaces contains one method for each Data Fetcher that must be implemented:

* For regular objects, there is one method par attribute that is another object or a list. This method will be called each time the GraphQL engine needs to read such an attribute). This method will have these parameters:
    * [DataFetchingEnvironment](https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/DataFetchingEnvironment.java): This is the GraphQL context. It can be used to retrieve data about the request.
    * __Source Object__: The POJO that is the parent object from which this DataFetcher will fetch an attribute. Typically, you can get its id, to read the data from a join in a database. See the provided samples for more details.
    * __Parameters__: The list of each parameters for the field to be fetched, as defined in the GraphQL schema. The parameter is null if not provided (only possible if this parameter is not mandatory)    
* For query/mutation/subscription objects, there is one method for each attribute, as each attribute is actually a query, a mutation or a subscription.
    * [DataFetchingEnvironment](https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/DataFetchingEnvironment.java): This is the GraphQL context. It can be used to retrieve data about the request.
    * __Parameters__: The list of each parameters for this query/mutation/subscription, as defined in the GraphQL schema. The parameter is null if not provided (only possible if this parameter is not mandatory)



The DataFetcherDelegate implementation must be Spring Component: Spring will magically discover them during the app or war startup: Spring is fantastic! :)

The only constraint you __must__ respect is that these DataFetcherDelegate interfaces are in a sub-package of the target package defined in the pom (or a sub-package _of com.generated.graphql_, which is the default if you didn't provide a package name).

So your DataFetcherDelegate implementation class will look like the sample below. Rather simple, isn't it!

```Java
package my.target.package.specific_code;

import java.util.List;

import javax.annotation.Resource;

import my.target.package.GraphQLUtil;
import my.target.package.Member;
import my.target.package.Post;
import my.target.package.Topic;
import my.target.package.TopicDataFetchersDelegate;
import my.target.package.jpa.MemberRepository;
import my.target.package.jpa.PostRepository;
import org.springframework.stereotype.Component;

import graphql.schema.DataFetchingEnvironment;

@Component
public class TopicDataFetchersDelegateImpl implements TopicDataFetchersDelegate {

	@Resource
	MemberRepository memberRepository;
	@Resource
	PostRepository postRepository;

	@Resource
	GraphQLUtil graphQLUtil;

	@Override
	public Member author(DataFetchingEnvironment dataFetchingEnvironment, Topic source) {
		return memberRepository.findById(source.getAuthorId()).get();
	}

	@Override
	public List<Post> posts(DataFetchingEnvironment dataFetchingEnvironment, Topic source, String since) {
		if (since == null)
			return graphQLUtil.iterableToList(postRepository.findByTopicId(source.getId()));
		else
			return graphQLUtil.iterableToList(postRepository.findByTopicIdAndSince(source.getId(), since));
	}
}
```

