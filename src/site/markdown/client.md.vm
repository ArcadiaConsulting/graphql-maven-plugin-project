# GraphQL Maven Plugin (client mode)

When configuring the graphql-maven-plugin in client mode, it reads a graphqls schema file, and will generates all the necessary code to make it easy to call a GraphQL server. 

As an overview, it generates:

* One java class for the Query object
* One java class for the Mutation object (if any)
* One POJO for each standard object of the GraphQL object

The generated code is stand-alone. That is: your project, when it runs, it doesn't depend on any dependency from graphql-java-generator.

This is why we call it an accelerator: you can generate the code once, and get rid of graphql-java-generator if you wish.

BTW: we think its better to continue using it! But you're free to leave, and keep the generated code.  
:)


## How to use the plugin ?

First, you'll have to create or get your GraphQL schema. The GraphQL plugin expects a _.graphqls_ file. See the [GraphQL schema doc](https://graphql.org/learn/schema/) for all the details.

Then, add the plugin to your Maven POM file:

```XML
<project ...>
...

	<build>
		<plugins>
...
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<version>${lastReleasedVersion}</version>
				<executions>
					<execution>
						<goals>
							<goal>graphql</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mode>client</mode>
					<packageName>my.target.package</packageName>
				</configuration>
			</plugin>
...
		</plugins>
	</build>
...
</project>
```

You must precise the mode. It can be either _client_ or _server_.

You can define the package that will contain the generated code. If not defined, the default package is _com.generated.graphql_. This package contains the generated code. 

The necessary runtime code source is joined to the generated code, but remains in its original package, which is _graphql.java.client.*_ and _graphql.java.annotation_.

## How to execute a GraphQL query ?

When in _client_ mode, you can query the server with just one line of code.

For instance :

```Java
import my.target.package.Human; // my.target.package is package name defined in the pom
import my.target.package.QueryType; // my.target.package is package name defined in the pom

...

	QueryType queryType = new QueryType();
	Human human = queryType.human("{id name appearsIn homePlanet friends{name}}", "180");
```

Where human is a POJO, that you can manipulate as any java object. This POJOs and the QueryType(s) have been generated at build time, thanks to the plugin configurated in the your pom.  


## Prepare your GraphQL queries

A _good idea_ is to prepare the queries at startup time. Doing this executes all the GraphQL query checks during the application startup. Preparing a query is actually __creating an create an ObjectResponse__. This ObjectResponse is then built once, and reused for each query execution of this type.

There are two ways to create an ObjectResponse (details below):

* The GraphQL way, with a string where you list the expected fields like this one "{id name appearsIn homePlanet friends{name}}" (more info <https://graphql.org/learn/queries/>)
    * This is the shortest way.
* The java builder way, with a java call for each field (see below)
    * This is more verbose, especially when fetching subobjects. It's actually done under the hood, when you use the GraphQL way. 

In both cases, the idea is to build an ObjectResponse once, that you'll reuse for every call of this type to the server. An ObjectResponse is actually the graphql-java-generator object created to match a query string like "{id name appearsIn homePlanet friends{name}}".

This ObjectResponse is the heart of the graphql-java-generator, when in client mode. It is responsible for:

* Defining what fields are expected in the GraphQL server response, for instance "{id name appearsIn homePlanet friends{name}}" 
* Check the validity of the query string at build time. That is: if the query string is invalid, a GraphQLRequestPreparationException exception is thrown.
* (in the near future) mark the queried fields as queried, so that calling a getter on a non-queried field result in an error (instead of "believing" that this value is null). 

_Note: In all cases, an ObjectResponse is built. This will help to add future functionnalities_. For instance, in the near future, when you access a field, the generated code will check that this field has actually been queried.
 
## Create an ObjectResponse with a query string

To prepare the queries during startup, you can initialize a local variable, like in the given samples, for instance here is an extract of WithQueries, from the StarWars sample. In this sample, the _heroFriendsFriendsFriends()_ method executes the query and returns the GraphQL server response, mapped into the relevant POJO.

```Java
public class WithQueries implements Queries {

	final QueryType queryType;
	ObjectResponse heroFriendsFriendsFriendsResponse;
...

	public WithQueries(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier)
			throws GraphQLRequestPreparationException {
		queryType = new QueryType(graphqlEndpoint, sslContext, hostnameVerifier);
...
		heroFriendsFriendsFriendsResponse = queryType.getHeroResponseBuilder()
				.withQueryResponseDef("{id appearsIn friends {name friends {friends{id name appearsIn}}}}").build();
...
	}

	public Character heroFriendsFriendsFriends() throws GraphQLExecutionException {
		return queryType.hero(heroFriendsFriendsFriendsResponse, Episode.NEWHOPE);
	}

}
```

## Create an ObjectResponse with an ObjectResponse Builder

 You can also use a Builder to generate the query, by adding field by field, and subobject by subobject, like below. Of course, it's more verbose.

```Java
public class WithQueries implements Queries {

	final QueryType queryType;
	ObjectResponse heroFriendsFriendsFriendsResponse;
...

	public WithQueries(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier)
			throws GraphQLRequestPreparationException {
		queryType = new QueryType(graphqlEndpoint, sslContext, hostnameVerifier);
...
		// Equivalent to  "{id appearsIn name friends {name friends {friends{id name appearsIn}}} primaryFunction }"
		ObjectResponse friends3 = ObjectResponse.newSubObjectBuilder(Character.class).withField("id").withField("name")
				.withField("appearsIn").build();
		ObjectResponse friends2 = ObjectResponse.newSubObjectBuilder(Character.class).withSubObject("friends", friends3)
				.build();
		ObjectResponse friends1 = ObjectResponse.newSubObjectBuilder(Character.class).withField("name")
				.withSubObject("friends", friends2).build();
		heroFriendsFriendsFriendsResponse = queryType.getHeroResponseBuilder().withField("id").withField("appearsIn")
				.withSubObject("friends", friends1).build();
...
	}

	public Character heroFriendsFriendsFriends() throws GraphQLExecutionException {
		return queryType.hero(heroFriendsFriendsFriendsResponse, Episode.NEWHOPE);
	}

}
```


## Use a Spring Bean

Instead of create a local variable for your ObjectResponse, another idea is to create a Spring Bean:

```Java
	@Bean
	ObjectResponse heroResponse(QueryType queryType) {
		return queryType.getHeroResponseBuilder().build();
	}
```

Doing this allows you to use this ObjectResponse, later on, in other Spring component(s), with something like this: 

```Java
	
	@Component
	class YourClass {
	
	@Resource
	ObjectResponse heroResponse;
	
	Character hero = queryType.hero(heroResponse, Episode.NEWHOPE);
```