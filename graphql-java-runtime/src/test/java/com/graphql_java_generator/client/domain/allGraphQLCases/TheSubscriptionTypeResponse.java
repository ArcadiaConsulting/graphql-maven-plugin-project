package com.graphql_java_generator.client.domain.allGraphQLCases;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.RequestType;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "TheSubscriptionTypeResponse", type = RequestType.subscription)
public class TheSubscriptionTypeResponse {

	@GraphQLInputParameters(names = { "episode" }, types = { "Episode" })
	@JsonProperty("subscribeNewHumanForEpisode")
	@GraphQLNonScalar(fieldName = "subscribeNewHumanForEpisode", graphQLTypeName = "Human", javaClass = Human.class)
	Human subscribeNewHumanForEpisode;

	public void setSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
		this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
	}

	public Human getSubscribeNewHumanForEpisode() {
		return subscribeNewHumanForEpisode;
	}

	@Override
	public String toString() {
		return "TheSubscriptionType {" + "subscribeNewHumanForEpisode: " + subscribeNewHumanForEpisode + "}";
	}

	/**
	 * Enum of field names
	 */
	public static enum Field implements GraphQLField {
		SubscribeNewHumanForEpisode("subscribeNewHumanForEpisode");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		@Override
		public String getFieldName() {
			return fieldName;
		}

		@Override
		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private Human subscribeNewHumanForEpisode;

		public Builder withSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
			this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
			return this;
		}

		public TheSubscriptionTypeResponse build() {
			TheSubscriptionTypeResponse object = new TheSubscriptionTypeResponse();
			object.setSubscribeNewHumanForEpisode(subscribeNewHumanForEpisode);
			return object;
		}
	}
}
