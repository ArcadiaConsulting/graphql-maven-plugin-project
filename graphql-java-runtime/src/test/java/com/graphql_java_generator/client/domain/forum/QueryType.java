package com.graphql_java_generator.client.domain.forum;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.client.QueryExecutor;
import com.graphql_java_generator.client.QueryExecutorImpl;
import com.graphql_java_generator.client.request.Builder;
import com.graphql_java_generator.client.request.ObjectResponse;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;
import com.graphql_java_generator.exception.GraphQLRequestPreparationException;

/**
 * @author generated by graphql-java-generator
 * @See https://github.com/graphql-java-generator/graphql-java-generator
 */
public class QueryType {

	/** Logger for this class */
	private static Logger logger = LogManager.getLogger();

	final QueryExecutor executor;

	/**
	 * This constructor expects the URI of the GraphQL server.<BR/>
	 * For example: https://my.server.com/graphql
	 * 
	 * @param graphqlEndpoint
	 */
	public QueryType(String graphqlEndpoint) {
		this.executor = new QueryExecutorImpl(graphqlEndpoint);
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * This method takes care of writting the query name, and the parameter(s) for the query. The given queryResponseDef
	 * describes the format of the response of the server response, that is the expected fields of the {@link Board}
	 * GraphQL type. It can be something like "{ id name }", if you want these fields of this type. Please take a look
	 * at the StarWars, Forum and other samples for more complex queries.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the query, in the native GraphQL format (see here above)
	 * @param episode
	 *            Parameter 1 of this query
	 * @param parameters
	 *            The list of values, for the bind variables defined in the query. If there is no bind variable in the
	 *            defined Query, this argument may be null or an empty {@link Map}
	 * @throws IOException
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphQLTypeName = "Board", javaClass = Board.class)
	@GraphQLQuery
	public List<Board> boards(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing of query 'boards' in query mode: {} ", queryResponseDef);
		ObjectResponse objectResponse = getBoardsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return boards(objectResponse, parameters);
	}

	@GraphQLNonScalar(graphQLTypeName = "Board", javaClass = Board.class)
	@GraphQLQuery
	public List<Board> boards(String queryResponseDef)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return boards(queryResponseDef, null);
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param episode
	 * @throws IOException
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphQLTypeName = "Board", javaClass = Board.class)
	@GraphQLQuery
	public List<Board> boards(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'boards' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'boards'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		if (!Board.class.equals(objectResponse.getFieldClass())) {
			throw new GraphQLRequestExecutionException("The ObjectResponse parameter should be an instance of "
					+ Board.class + ", but is an instance of " + objectResponse.getClass().getName());
		}

		QueryTypeBoards ret = executor.execute("query", objectResponse, parameters, QueryTypeBoards.class);

		return ret.boards;
	}

	@GraphQLNonScalar(graphQLTypeName = "Board", javaClass = Board.class)
	@GraphQLQuery
	public List<Board> boards(ObjectResponse objectResponse) throws GraphQLRequestExecutionException {
		return boards(objectResponse, null);
	}

	/**
	 * Get the {@link ObjectResponse.Builder} for the Board, as expected by the boards query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public Builder getBoardsResponseBuilder() throws GraphQLRequestPreparationException {
		return new Builder(getClass(), "boards");
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * This method takes care of writting the query name, and the parameter(s) for the query. The given queryResponseDef
	 * describes the format of the response of the server response, that is the expected fields of the {@link Topic}
	 * GraphQL type. It can be something like "{ id name }", if you want these fields of this type. Please take a look
	 * at the StarWars, Forum and other samples for more complex queries.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the query, in the native GraphQL format (see here above)
	 * @param episode
	 *            Parameter 1 of this query
	 * @throws IOException
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(String queryResponseDef, String boardName, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing of query 'topics' in query mode: {} ", queryResponseDef);
		ObjectResponse objectResponse = getTopicsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return topics(objectResponse, boardName, parameters);
	}

	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(String queryResponseDef, String boardName) {
		return topics(queryResponseDef, null);
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param episode
	 * @throws IOException
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(ObjectResponse objectResponse, String boardName, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'topics' with parameters: {} ", boardName);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'topics'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("queryTypeTopicsBoardName", boardName);

		if (!Topic.class.equals(objectResponse.getFieldClass())) {
			throw new GraphQLRequestExecutionException("The ObjectResponse parameter should be an instance of "
					+ Topic.class + ", but is an instance of " + objectResponse.getClass().getName());
		}

		QueryTypeTopics ret = executor.execute("query", objectResponse, parameters, QueryTypeTopics.class);

		return ret.topics;
	}

	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(ObjectResponse objectResponse, String boardName) {
		return topics(objectResponse, null);
	}

	/**
	 * Get the {@link ObjectResponse.Builder} for the Topic, as expected by the topics query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public Builder getTopicsResponseBuilder() throws GraphQLRequestPreparationException {
		return new Builder(getClass(), "topics");
	}

}
