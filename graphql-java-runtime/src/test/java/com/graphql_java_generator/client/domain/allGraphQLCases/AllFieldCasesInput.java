package com.graphql_java_generator.client.domain.allGraphQLCases;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("AllFieldCasesInput")
public class AllFieldCasesInput {

	@JsonProperty("id")
	@GraphQLScalar(graphQLTypeName = "ID", javaClass = String.class)
	String id;

	@JsonProperty("name")
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	String name;

	@JsonProperty("forname")
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	String forname;

	@JsonProperty("age")
	@GraphQLScalar(graphQLTypeName = "Long", javaClass = Long.class)
	Long age;

	@JsonProperty("nbComments")
	@GraphQLScalar(graphQLTypeName = "Int", javaClass = Integer.class)
	Integer nbComments;

	@JsonProperty("comments")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> comments;

	@JsonProperty("booleans")
	@JsonDeserialize(contentAs = Boolean.class)
	@GraphQLScalar(graphQLTypeName = "Boolean", javaClass = Boolean.class)
	List<Boolean> booleans;

	@JsonProperty("aliases")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> aliases;

	@JsonProperty("planets")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> planets;

	@JsonProperty("withIdSubtype")
	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtypeInput.class)
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithIdSubtypeInput", javaClass = AllFieldCasesWithIdSubtypeInput.class)
	List<AllFieldCasesWithIdSubtypeInput> withIdSubtype;

	@JsonProperty("withoutIdSubtype")
	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtypeInput.class)
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithoutIdSubtypeInput", javaClass = AllFieldCasesWithoutIdSubtypeInput.class)
	List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype;

	public void setId(String id) {
		this.id = id;
	}

	public String getId() {
		return id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setForname(String forname) {
		this.forname = forname;
	}

	public String getForname() {
		return forname;
	}

	public void setAge(Long age) {
		this.age = age;
	}

	public Long getAge() {
		return age;
	}

	public void setNbComments(Integer nbComments) {
		this.nbComments = nbComments;
	}

	public Integer getNbComments() {
		return nbComments;
	}

	public void setComments(List<String> comments) {
		this.comments = comments;
	}

	public List<String> getComments() {
		return comments;
	}

	public void setBooleans(List<Boolean> booleans) {
		this.booleans = booleans;
	}

	public List<Boolean> getBooleans() {
		return booleans;
	}

	public void setAliases(List<String> aliases) {
		this.aliases = aliases;
	}

	public List<String> getAliases() {
		return aliases;
	}

	public void setPlanets(List<String> planets) {
		this.planets = planets;
	}

	public List<String> getPlanets() {
		return planets;
	}

	public void setWithIdSubtype(List<AllFieldCasesWithIdSubtypeInput> withIdSubtype) {
		this.withIdSubtype = withIdSubtype;
	}

	public List<AllFieldCasesWithIdSubtypeInput> getWithIdSubtype() {
		return withIdSubtype;
	}

	public void setWithoutIdSubtype(List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype) {
		this.withoutIdSubtype = withoutIdSubtype;
	}

	public List<AllFieldCasesWithoutIdSubtypeInput> getWithoutIdSubtype() {
		return withoutIdSubtype;
	}

	@Override
	public String toString() {
		return "AllFieldCasesInput {" + "id: " + id + ", " + "name: " + name + ", " + "forname: " + forname + ", "
				+ "age: " + age + ", " + "nbComments: " + nbComments + ", " + "comments: " + comments + ", "
				+ "booleans: " + booleans + ", " + "aliases: " + aliases + ", " + "planets: " + planets + ", "
				+ "withIdSubtype: " + withIdSubtype + ", " + "withoutIdSubtype: " + withoutIdSubtype + "}";
	}
}
