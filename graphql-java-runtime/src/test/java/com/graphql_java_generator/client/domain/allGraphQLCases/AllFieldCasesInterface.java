package com.graphql_java_generator.client.domain.allGraphQLCases;

import java.util.List;


import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

import java.util.Date;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
		@JsonSubTypes({ @Type(value = AllFieldCasesInterfaceType.class, name = "AllFieldCasesInterfaceType") })
		@GraphQLInterfaceType("AllFieldCasesInterface")
public interface AllFieldCasesInterface  {

	@GraphQLScalar(fieldName = "id", graphQLTypeName = "ID", javaClass = String.class)
	public void setId(String id);

	@GraphQLScalar(fieldName = "id", graphQLTypeName = "ID", javaClass = String.class)
	public String getId();

	@GraphQLScalar(fieldName = "name", graphQLTypeName = "String", javaClass = String.class)
	public void setName(String name);

	@GraphQLScalar(fieldName = "name", graphQLTypeName = "String", javaClass = String.class)
	public String getName();

	@GraphQLInputParameters(names = {"uppercase", "textToAppendToTheForname"}, types = {"Boolean", "String"})
	@GraphQLScalar(fieldName = "forname", graphQLTypeName = "String", javaClass = String.class)
	public void setForname(String forname);

	@GraphQLInputParameters(names = {"uppercase", "textToAppendToTheForname"}, types = {"Boolean", "String"})
	@GraphQLScalar(fieldName = "forname", graphQLTypeName = "String", javaClass = String.class)
	public String getForname();

	@GraphQLScalar(fieldName = "age", graphQLTypeName = "Int", javaClass = Integer.class)
	public void setAge(Integer age);

	@GraphQLScalar(fieldName = "age", graphQLTypeName = "Int", javaClass = Integer.class)
	public Integer getAge();

	@GraphQLScalar(fieldName = "nbComments", graphQLTypeName = "Int", javaClass = Integer.class)
	public void setNbComments(Integer nbComments);

	@GraphQLScalar(fieldName = "nbComments", graphQLTypeName = "Int", javaClass = Integer.class)
	public Integer getNbComments();

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "comments", graphQLTypeName = "String", javaClass = String.class)
	public void setComments(List<String> comments);

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "comments", graphQLTypeName = "String", javaClass = String.class)
	public List<String> getComments();

	@JsonDeserialize(contentAs = Boolean.class)
	@GraphQLScalar(fieldName = "booleans", graphQLTypeName = "Boolean", javaClass = Boolean.class)
	public void setBooleans(List<Boolean> booleans);

	@JsonDeserialize(contentAs = Boolean.class)
	@GraphQLScalar(fieldName = "booleans", graphQLTypeName = "Boolean", javaClass = Boolean.class)
	public List<Boolean> getBooleans();

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "aliases", graphQLTypeName = "String", javaClass = String.class)
	public void setAliases(List<String> aliases);

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "aliases", graphQLTypeName = "String", javaClass = String.class)
	public List<String> getAliases();

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "planets", graphQLTypeName = "String", javaClass = String.class)
	public void setPlanets(List<String> planets);

	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(fieldName = "planets", graphQLTypeName = "String", javaClass = String.class)
	public List<String> getPlanets();

	@JsonDeserialize(contentAs = Human.class)
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeName = "Human", javaClass = Human.class)
	public void setFriends(List<Human> friends);

	@JsonDeserialize(contentAs = Human.class)
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeName = "Human", javaClass = Human.class)
	public List<Human> getFriends();

	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType);

	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public AllFieldCasesWithIdSubtype getOneWithIdSubType();

	@GraphQLInputParameters(names = {"nbItems", "uppercaseName", "textToAppendToTheForname"}, types = {"Int", "Boolean", "String"})
	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtype.class)
	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes);

	@GraphQLInputParameters(names = {"nbItems", "uppercaseName", "textToAppendToTheForname"}, types = {"Int", "Boolean", "String"})
	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtype.class)
	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes();

	@GraphQLInputParameters(names = {"input"}, types = {"FieldParameterInput"})
	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType);

	@GraphQLInputParameters(names = {"input"}, types = {"FieldParameterInput"})
	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType();

	@GraphQLInputParameters(names = {"nbItems", "input", "textToAppendToTheForname"}, types = {"Int", "FieldParameterInput", "String"})
	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtype.class)
	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes);

	@GraphQLInputParameters(names = {"nbItems", "input", "textToAppendToTheForname"}, types = {"Int", "FieldParameterInput", "String"})
	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtype.class)
	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes();

	@GraphQLScalar(fieldName = "__typename", graphQLTypeName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@GraphQLScalar(fieldName = "__typename", graphQLTypeName = "String", javaClass = String.class)
	public String get__typename();
}
