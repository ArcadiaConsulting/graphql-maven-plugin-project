package com.graphql_java_generator.client.domain.allGraphQLCases;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */

public class AllFieldCasesInterfaceImpl implements AllFieldCasesInterface {

	@JsonProperty("id")
	@GraphQLScalar(graphQLTypeName = "ID", javaClass = String.class)
	String id;

	@JsonProperty("name")
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	String name;

	@GraphQLInputParameters(names = { "uppercase", "textToAppendToTheForname" }, types = { "Boolean", "String" })
	@JsonProperty("forname")
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	String forname;

	@JsonProperty("age")
	@GraphQLScalar(graphQLTypeName = "Int", javaClass = Integer.class)
	Integer age;

	@JsonProperty("nbComments")
	@GraphQLScalar(graphQLTypeName = "Int", javaClass = Integer.class)
	Integer nbComments;

	@JsonProperty("comments")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> comments;

	@JsonProperty("booleans")
	@JsonDeserialize(contentAs = Boolean.class)
	@GraphQLScalar(graphQLTypeName = "Boolean", javaClass = Boolean.class)
	List<Boolean> booleans;

	@JsonProperty("aliases")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> aliases;

	@JsonProperty("planets")
	@JsonDeserialize(contentAs = String.class)
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	List<String> planets;

	@JsonProperty("friends")
	@JsonDeserialize(contentAs = Human.class)
	@GraphQLNonScalar(graphQLTypeName = "Human", javaClass = Human.class)
	List<Human> friends;

	@JsonProperty("oneWithIdSubType")
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	AllFieldCasesWithIdSubtype oneWithIdSubType;

	@GraphQLInputParameters(names = { "nbItems", "uppercaseName", "textToAppendToTheForname" }, types = { "Int",
			"Boolean", "String" })
	@JsonProperty("listWithIdSubTypes")
	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtype.class)
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	List<AllFieldCasesWithIdSubtype> listWithIdSubTypes;

	@GraphQLInputParameters(names = { "input" }, types = { "FieldParameterInput" })
	@JsonProperty("oneWithoutIdSubType")
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	AllFieldCasesWithoutIdSubtype oneWithoutIdSubType;

	@GraphQLInputParameters(names = { "nbItems", "input", "textToAppendToTheForname" }, types = { "Int",
			"FieldParameterInput", "String" })
	@JsonProperty("listWithoutIdSubTypes")
	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtype.class)
	@GraphQLNonScalar(graphQLTypeName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes;

	@Override
	public void setId(String id) {
		this.id = id;
	}

	@Override
	public String getId() {
		return id;
	}

	@Override
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public void setForname(String forname) {
		this.forname = forname;
	}

	@Override
	public String getForname() {
		return forname;
	}

	@Override
	public void setAge(Integer age) {
		this.age = age;
	}

	@Override
	public Integer getAge() {
		return age;
	}

	@Override
	public void setNbComments(Integer nbComments) {
		this.nbComments = nbComments;
	}

	@Override
	public Integer getNbComments() {
		return nbComments;
	}

	@Override
	public void setComments(List<String> comments) {
		this.comments = comments;
	}

	@Override
	public List<String> getComments() {
		return comments;
	}

	@Override
	public void setBooleans(List<Boolean> booleans) {
		this.booleans = booleans;
	}

	@Override
	public List<Boolean> getBooleans() {
		return booleans;
	}

	@Override
	public void setAliases(List<String> aliases) {
		this.aliases = aliases;
	}

	@Override
	public List<String> getAliases() {
		return aliases;
	}

	@Override
	public void setPlanets(List<String> planets) {
		this.planets = planets;
	}

	@Override
	public List<String> getPlanets() {
		return planets;
	}

	@Override
	public void setFriends(List<Human> friends) {
		this.friends = friends;
	}

	@Override
	public List<Human> getFriends() {
		return friends;
	}

	@Override
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType) {
		this.oneWithIdSubType = oneWithIdSubType;
	}

	@Override
	public AllFieldCasesWithIdSubtype getOneWithIdSubType() {
		return oneWithIdSubType;
	}

	@Override
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes) {
		this.listWithIdSubTypes = listWithIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes() {
		return listWithIdSubTypes;
	}

	@Override
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType) {
		this.oneWithoutIdSubType = oneWithoutIdSubType;
	}

	@Override
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType() {
		return oneWithoutIdSubType;
	}

	@Override
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes) {
		this.listWithoutIdSubTypes = listWithoutIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes() {
		return listWithoutIdSubTypes;
	}

	@Override
	public String toString() {
		return "AllFieldCasesInterfaceImpl {" + "id: " + id + ", " + "name: " + name + ", " + "forname: " + forname
				+ ", " + "age: " + age + ", " + "nbComments: " + nbComments + ", " + "comments: " + comments + ", "
				+ "booleans: " + booleans + ", " + "aliases: " + aliases + ", " + "planets: " + planets + ", "
				+ "friends: " + friends + ", " + "oneWithIdSubType: " + oneWithIdSubType + ", " + "listWithIdSubTypes: "
				+ listWithIdSubTypes + ", " + "oneWithoutIdSubType: " + oneWithoutIdSubType + ", "
				+ "listWithoutIdSubTypes: " + listWithoutIdSubTypes + "}";
	}

	@JsonProperty("__typename")
	@GraphQLScalar(graphQLTypeName = "String", javaClass = String.class)
	String __typename;

	@Override
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@Override
	public String get__typename() {
		return __typename;
	}
}
