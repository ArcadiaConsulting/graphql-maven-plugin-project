package com.graphql_java_generator.client.domain.forum;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

import java.util.Date;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */

public class QueryTypeResponse  {

	@JsonProperty("boards")
	@JsonDeserialize(contentAs = Board.class)
	@GraphQLNonScalar(graphQLTypeName = "Board", javaClass = Board.class)
	List<Board> boards;


	@JsonProperty("nbBoards")
	@GraphQLScalar(graphQLTypeName = "Int", javaClass = Integer.class)
	Integer nbBoards;


	@GraphQLInputParameters(names = {"boardName"}, types = {"String"})
	@JsonProperty("topics")
	@JsonDeserialize(contentAs = Topic.class)
	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	List<Topic> topics;


	@GraphQLInputParameters(names = {"boardName", "keyword"}, types = {"String", "String"})
	@JsonProperty("findTopics")
	@JsonDeserialize(contentAs = Topic.class)
	@GraphQLNonScalar(graphQLTypeName = "Topic", javaClass = Topic.class)
	List<Topic> findTopics;



	public void setBoards(List<Board> boards) {
		this.boards = boards;
	}

	public List<Board> getBoards() {
		return boards;
	}

	public void setNbBoards(Integer nbBoards) {
		this.nbBoards = nbBoards;
	}

	public Integer getNbBoards() {
		return nbBoards;
	}

	public void setTopics(List<Topic> topics) {
		this.topics = topics;
	}

	public List<Topic> getTopics() {
		return topics;
	}

	public void setFindTopics(List<Topic> findTopics) {
		this.findTopics = findTopics;
	}

	public List<Topic> getFindTopics() {
		return findTopics;
	}

    public String toString() {
        return "QueryType {"
				+ "boards: " + boards
				+ ", "
				+ "nbBoards: " + nbBoards
				+ ", "
				+ "topics: " + topics
				+ ", "
				+ "findTopics: " + findTopics
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Boards("boards"),
		NbBoards("nbBoards"),
		Topics("topics"),
		FindTopics("findTopics");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<Board> boards;
		private Integer nbBoards;
		private List<Topic> topics;
		private List<Topic> findTopics;


		public Builder withBoards(List<Board> boards) {
			this.boards = boards;
			return this;
		}
		public Builder withNbBoards(Integer nbBoards) {
			this.nbBoards = nbBoards;
			return this;
		}
		public Builder withTopics(List<Topic> topics) {
			this.topics = topics;
			return this;
		}
		public Builder withFindTopics(List<Topic> findTopics) {
			this.findTopics = findTopics;
			return this;
		}

		public QueryTypeResponse build() {
			QueryTypeResponse object = new QueryTypeResponse();
			object.setBoards(boards);
			object.setNbBoards(nbBoards);
			object.setTopics(topics);
			object.setFindTopics(findTopics);
			return object;
		}
	}
}
