package graphql.java.client.domain.forum;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import graphql.java.client.QueryExecutor;
import graphql.java.client.QueryExecutorImpl;
import graphql.java.client.annotation.GraphQLNonScalar;
import graphql.java.client.annotation.GraphQLQuery;
import graphql.java.client.request.Builder;
import graphql.java.client.request.InputParameter;
import graphql.java.client.request.ObjectResponse;
import graphql.java.client.response.GraphQLExecutionException;
import graphql.java.client.response.GraphQLRequestPreparationException;

/**
 * @author generated by graphql-maven-plugin
 * @See https://github.com/graphql-java-generator/graphql-java-generator
 */
public class QueryType {

	/** Logger for this class */
	private static Logger logger = LogManager.getLogger();

	QueryExecutor executor = new QueryExecutorImpl();

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * This method takes care of writting the query name, and the parameter(s) for the query. The given queryResponseDef
	 * describes the format of the response of the server response, that is the expected fields of the {@link Board}
	 * GraphQL type. It can be something like "{ id name }", if you want these fields of this type. Please take a look
	 * at the StarWars, Forum and other samples for more complex queries.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the query, in the native GraphQL format (see here above)
	 * @param episode
	 *            Parameter 1 of this query
	 * @throws IOException
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphqlType = Board.class)
	@GraphQLQuery
	public List<Board> boards(String queryResponseDef)
			throws GraphQLExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing of query 'boards' in query mode: {} ", queryResponseDef);
		ObjectResponse objectResponse = getBoardsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return boards(objectResponse);
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param episode
	 * @throws IOException
	 * @throws GraphQLExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphqlType = Board.class)
	@GraphQLQuery
	public List<Board> boards(ObjectResponse objectResponse) throws GraphQLExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'boards' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'boards'");
		}

		// InputParameters
		List<InputParameter> parameters = new ArrayList<>();

		if (!Board.class.equals(objectResponse.getFieldClass())) {
			throw new GraphQLExecutionException("The ObjectResponse parameter should be an instance of " + Board.class
					+ ", but is an instance of " + objectResponse.getClass().getName());
		}

		QueryTypeBoards ret = executor.execute("query", objectResponse, parameters, QueryTypeBoards.class);

		return ret.boards;
	}

	/**
	 * Get the {@link ObjectResponse.Builder} for the Board, as expected by the boards query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public Builder getBoardsResponseBuilder() throws GraphQLRequestPreparationException {
		return ObjectResponse.newQueryResponseDefBuilder(getClass(), "boards");
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * This method takes care of writting the query name, and the parameter(s) for the query. The given queryResponseDef
	 * describes the format of the response of the server response, that is the expected fields of the {@link Topic}
	 * GraphQL type. It can be something like "{ id name }", if you want these fields of this type. Please take a look
	 * at the StarWars, Forum and other samples for more complex queries.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the query, in the native GraphQL format (see here above)
	 * @param episode
	 *            Parameter 1 of this query
	 * @throws IOException
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphqlType = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(String queryResponseDef, String boardName)
			throws GraphQLExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing of query 'topics' in query mode: {} ", queryResponseDef);
		ObjectResponse objectResponse = getTopicsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return topics(objectResponse, boardName);
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param episode
	 * @throws IOException
	 * @throws GraphQLExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@GraphQLNonScalar(graphqlType = Topic.class)
	@GraphQLQuery
	public List<Topic> topics(ObjectResponse objectResponse, String boardName) throws GraphQLExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'topics' with parameters: {} ", boardName);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'topics'");
		}

		// InputParameters
		List<InputParameter> parameters = new ArrayList<>();
		parameters.add(new InputParameter("boardName", boardName));

		if (!Topic.class.equals(objectResponse.getFieldClass())) {
			throw new GraphQLExecutionException("The ObjectResponse parameter should be an instance of " + Topic.class
					+ ", but is an instance of " + objectResponse.getClass().getName());
		}

		QueryTypeTopics ret = executor.execute("query", objectResponse, parameters, QueryTypeTopics.class);

		return ret.topics;
	}

	/**
	 * Get the {@link ObjectResponse.Builder} for the Topic, as expected by the topics query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public Builder getTopicsResponseBuilder() throws GraphQLRequestPreparationException {
		return ObjectResponse.newQueryResponseDefBuilder(getClass(), "topics");
	}

}
