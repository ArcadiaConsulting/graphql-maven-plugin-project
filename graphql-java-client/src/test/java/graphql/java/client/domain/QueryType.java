package graphql.java.client.domain;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import graphql.java.client.NonScalar;
import graphql.java.client.QueryExecutor;
import graphql.java.client.QueryExecutorImpl;
import graphql.java.client.request.InputParameter;
import graphql.java.client.request.ObjectResponseDef;
import graphql.java.client.response.GraphQLExecutionException;
import graphql.java.client.response.GraphQLRequestPreparationException;

/**
 * This class represents the GraphQL QueryType defined in the graphQL schema. It contains the java method which allows
 * to easily call the GraphQL server, for each field defined for this query in the GraphQL schema.
 * 
 * @author generated by graphql-maven-plugin
 */
public class QueryType {

	/** Logger for this class */
	private static Logger logger = LogManager.getLogger();

	QueryExecutor executor = new QueryExecutorImpl();

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @param objectResponseDef
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param episode
	 * @throws IOException
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponseDef}
	 * @throws GraphQLExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@NonScalar(graphqlType = Character.class)
	public Character hero(ObjectResponseDef objectResponseDef, Episode episode)
			throws GraphQLExecutionException, IOException, GraphQLRequestPreparationException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'hero' with parameters: {} ", episode);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'hero'");
		}

		// InputParameters
		List<InputParameter> parameters = new ArrayList<>();
		parameters.add(new InputParameter("episode", episode));

		if (!getClass().equals(objectResponseDef.getClass())) {
			throw new GraphQLRequestPreparationException("The ObjectResponseDef parameter should be an instance of "
					+ getClass().getName() + ", but is an instance of " + objectResponseDef.getClass().getName());
		}

		return executor.execute(objectResponseDef, parameters, CharacterImpl.class);
	}

	/**
	 * Get the {@link ObjectResponseDef.Builder} for the Character, as expected by the hero query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public ObjectResponseDef.Builder getHeroResponseDefBuilder() throws GraphQLRequestPreparationException {
		return ObjectResponseDef.newQueryResponseDefBuilder(getClass(), "hero");
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 * 
	 * @throws IOException
	 * @throws GraphQLExecutionException
	 */
	@NonScalar(graphqlType = Human.class)
	public Human human(ObjectResponseDef objectResponseDef, String id) throws GraphQLExecutionException, IOException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'human' with parameters: {} ", id);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'human'");
		}

		// InputParameters
		List<InputParameter> parameters = new ArrayList<>();
		parameters.add(new InputParameter("id", id));

		return executor.execute(objectResponseDef, parameters, Human.class);
	}

	/**
	 * Get the {@link ObjectResponseDef.Builder} for the Human, as expected by the hero query.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public ObjectResponseDef.Builder getHumanResponseDefBuilder() throws GraphQLRequestPreparationException {
		return ObjectResponseDef.newQueryResponseDefBuilder(getClass(), "human");
	}

	/**
	 * This method is expected by the graphql-java framework. It will be called when this query is called. It offers a
	 * logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).
	 */
	@NonScalar(graphqlType = Droid.class)
	public Droid droid(ObjectResponseDef objectResponseDef, String id) throws GraphQLExecutionException, IOException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing of query 'droid' with parameters: {} ", id);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing of query 'droid'");
		}

		// InputParameters
		List<InputParameter> parameters = new ArrayList<>();
		parameters.add(new InputParameter("id", id));

		return executor.execute(objectResponseDef, parameters, Droid.class);
	}
}
