package com.graphql_java_generator;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Component;

import graphql.schema.DataFetcher;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LogManager.getLogger();

	@Resource
	QueryTypeDataFetchersDelegate queryTypeDataFetchersDelegate;

	@Resource
	MutationTypeDataFetchersDelegate mutationTypeDataFetchersDelegate;

	@Resource
	HumanDataFetchersDelegate humanDataFetchersDelegate;

	@Resource
	DroidDataFetchersDelegate droidDataFetchersDelegate;

	@Resource
	CharacterImplDataFetchersDelegate characterImplDataFetchersDelegate;

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for QueryTypeDataFetchersDelegate
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Character> queryTypeDataFetchersDelegateHero() {
		return dataFetchingEnvironment -> {
			Episode episode = null;
			if (dataFetchingEnvironment.getArgument("episode") != null)
				episode = Episode.valueOf(dataFetchingEnvironment.getArgument("episode"));

			Character ret = null;
			try {
				ret = queryTypeDataFetchersDelegate.hero(dataFetchingEnvironment, episode);
				logger.debug("hero: 1 result found");
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
				logger.debug("hero: no result found");
			}
			return ret;
		};
	}

	public DataFetcher<List<Character>> queryTypeDataFetchersDelegateCharacters() {
		return dataFetchingEnvironment -> {
			Episode episode = null;
			if (dataFetchingEnvironment.getArgument("episode") != null)
				episode = Episode.valueOf(dataFetchingEnvironment.getArgument("episode"));

			List<Character> ret = queryTypeDataFetchersDelegate.characters(dataFetchingEnvironment, episode);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Character x : ret)
					nbLines += 1;
				logger.debug("characters: {} found rows", nbLines);
			}
			return ret;
		};
	}

	public DataFetcher<Human> queryTypeDataFetchersDelegateHuman() {
		return dataFetchingEnvironment -> {
			UUID id = UUID.fromString(dataFetchingEnvironment.getArgument("id"));

			Human ret = null;
			try {
				ret = queryTypeDataFetchersDelegate.human(dataFetchingEnvironment, id);
				logger.debug("human: 1 result found");
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
				logger.debug("human: no result found");
			}
			return ret;
		};
	}

	public DataFetcher<Droid> queryTypeDataFetchersDelegateDroid() {
		return dataFetchingEnvironment -> {
			UUID id = UUID.fromString(dataFetchingEnvironment.getArgument("id"));

			Droid ret = null;
			try {
				ret = queryTypeDataFetchersDelegate.droid(dataFetchingEnvironment, id);
				logger.debug("droid: 1 result found");
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
				logger.debug("droid: no result found");
			}
			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for MutationTypeDataFetchersDelegate
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Human> mutationTypeDataFetchersDelegateCreateHuman() {
		return dataFetchingEnvironment -> {
			String name = dataFetchingEnvironment.getArgument("name");
			String homePlanet = dataFetchingEnvironment.getArgument("homePlanet");

			Human ret = null;
			try {
				ret = mutationTypeDataFetchersDelegate.createHuman(dataFetchingEnvironment, name, homePlanet);
				logger.debug("createHuman: 1 result found");
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
				logger.debug("createHuman: no result found");
			}
			return ret;
		};
	}

	public DataFetcher<Character> mutationTypeDataFetchersDelegateAddFriend() {
		return dataFetchingEnvironment -> {
			String idCharacter = dataFetchingEnvironment.getArgument("idCharacter");
			String idNewFriend = dataFetchingEnvironment.getArgument("idNewFriend");

			Character ret = null;
			try {
				ret = mutationTypeDataFetchersDelegate.addFriend(dataFetchingEnvironment, idCharacter, idNewFriend);
				logger.debug("addFriend: 1 result found");
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
				logger.debug("addFriend: no result found");
			}
			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for HumanDataFetchersDelegate
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> humanDataFetchersDelegateFriends() {
		return dataFetchingEnvironment -> {
			Human source = dataFetchingEnvironment.getSource();

			List<Character> ret = humanDataFetchersDelegate.friends(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Character x : ret)
					nbLines += 1;
				logger.debug("friends: {} found rows", nbLines);
			}
			return ret;
		};
	}

	public DataFetcher<List<Episode>> humanDataFetchersDelegateAppearsIn() {
		return dataFetchingEnvironment -> {
			Human source = dataFetchingEnvironment.getSource();

			List<Episode> ret = humanDataFetchersDelegate.appearsIn(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Episode x : ret)
					nbLines += 1;
				logger.debug("appearsIn: {} found rows", nbLines);
			}
			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DroidDataFetchersDelegate
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> droidDataFetchersDelegateFriends() {
		return dataFetchingEnvironment -> {
			Droid source = dataFetchingEnvironment.getSource();

			List<Character> ret = droidDataFetchersDelegate.friends(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Character x : ret)
					nbLines += 1;
				logger.debug("friends: {} found rows", nbLines);
			}
			return ret;
		};
	}

	public DataFetcher<List<Episode>> droidDataFetchersDelegateAppearsIn() {
		return dataFetchingEnvironment -> {
			Droid source = dataFetchingEnvironment.getSource();

			List<Episode> ret = droidDataFetchersDelegate.appearsIn(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Episode x : ret)
					nbLines += 1;
				logger.debug("appearsIn: {} found rows", nbLines);
			}
			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for CharacterImplDataFetchersDelegate
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> characterImplDataFetchersDelegateFriends() {
		return dataFetchingEnvironment -> {
			CharacterImpl source = dataFetchingEnvironment.getSource();

			List<Character> ret = characterImplDataFetchersDelegate.friends(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Character x : ret)
					nbLines += 1;
				logger.debug("friends: {} found rows", nbLines);
			}
			return ret;
		};
	}

	public DataFetcher<List<Episode>> characterImplDataFetchersDelegateAppearsIn() {
		return dataFetchingEnvironment -> {
			CharacterImpl source = dataFetchingEnvironment.getSource();

			List<Episode> ret = characterImplDataFetchersDelegate.appearsIn(dataFetchingEnvironment, source);
			if (logger.isDebugEnabled()) {
				int nbLines = 0;
				for (Episode x : ret)
					nbLines += 1;
				logger.debug("appearsIn: {} found rows", nbLines);
			}
			return ret;
		};
	}

}
