package com.graphql_java_generator;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.UUID;

import graphql.schema.DataFetchingEnvironment;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface MutationTypeDataFetchersDelegate {

	/**
	 * This method loads the data for MutationType.createHuman
	 * <BR/>
	 * Actual execution of the DataFetcher. This is delegated to the developper, as it is not possible to manage every possible use cases.<BR/>
	 * Note 1: In the future, more and more standard cases will be generated.
	 * 
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher 
	 * @param name The input parameter sent in the query by the GraphQL consumer
	 * @param homePlanet The input parameter sent in the query by the GraphQL consumer
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 * by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 * wheter or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Human createHuman(DataFetchingEnvironment dataFetchingEnvironment, String  name, String  homePlanet);
	
	/**
	 * This method loads the data for MutationType.addFriend
	 * <BR/>
	 * Actual execution of the DataFetcher. This is delegated to the developper, as it is not possible to manage every possible use cases.<BR/>
	 * Note 1: In the future, more and more standard cases will be generated.
	 * 
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher 
	 * @param idCharacter The input parameter sent in the query by the GraphQL consumer
	 * @param idNewFriend The input parameter sent in the query by the GraphQL consumer
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 * by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 * wheter or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character addFriend(DataFetchingEnvironment dataFetchingEnvironment, String  idCharacter, String  idNewFriend);
	
}
