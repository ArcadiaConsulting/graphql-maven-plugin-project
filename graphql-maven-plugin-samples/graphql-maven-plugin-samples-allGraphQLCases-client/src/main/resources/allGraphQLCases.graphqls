scalar Date
scalar Long

# directives are currently ignored
directive @deprecated(
  reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

schema {
	#A comment on the query
    query: MyQueryType
    mutation: AnotherMutationType
    subscription: TheSubscriptionType
}

type MyQueryType {
	withoutParameters: [Character]!
    withOneOptionalParam(character: CharacterInput): Character
    withOneMandatoryParam(character: CharacterInput!): Character
    #withOneMandatoryParamDefaultValue(nbResultat: Int! = 13): Character!
    #withTwoMandatoryParamDefaultVal(theHero: DroidInput!, num: Int = 45): Droid!
    withEnum(episode: Episode! = NEWHOPE): Character
    
    # withList return a list of Characters, matching the given list of CharacterInput.
    # The name of the first Character returned is replaced by the given firstName.
    # All ids are generated  
    withList(firstName: String!, characters: [CharacterInput]!): [Character]


	# Complementary tests with the AllFieldCases Object
	allFieldCases(input: AllFieldCasesInput): AllFieldCases    
    
    
    # error always returns an error!  (used to check the error management)
    error(errorLabel: String!): Character!
    
    # Check for GraphQL identifier that are java keywords
    aBreak: break
}

type AnotherMutationType {
	createHuman(human: HumanInput!): Human!
	createAllFieldCases(input: AllFieldCasesInput!): AllFieldCases!
}

type TheSubscriptionType {
	# Will be notified for each Human added to this Episode
	subscribeNewHumanForEpisode(episode: Episode!): Human!
}


enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
    DOES_NOT_EXIST @deprecated(reason: "This is not an existing episode!")
}

interface WithID {
   id: ID!
}

interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
}

input CharacterInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    # type should be one of Human or Droid
    type: String!
}

interface Commented {
	nbComments: Int
    comments: [String]
}

input AllFieldCasesInput {
    id: ID!
    name: String!
    forname: String
    age: Long!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    withIdSubtype: [AllFieldCasesWithIdSubtypeInput!]
    withoutIdSubtype: [AllFieldCasesWithoutIdSubtypeInput!]
}

input AllFieldCasesWithIdSubtypeInput {
    id: ID!
    name: String!
}

input FieldParameterInput {
	uppercase: Boolean
	date: Date
}

input AllFieldCasesWithoutIdSubtypeInput {
    name: String!
}

enum Unit {
    YEAR
    MONTH
    MINUTE
}


# This type is a clone of the InterfaceAllFieldCases interface. 
# Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
type AllFieldCases implements WithID {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age(unit: Unit = YEAR) : Long!   @deprecated(reason: "This is a test")
    date: Date
    dates: [Date]!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Long!, date: Date, dates: [Date]!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Long!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

# This interface is a clone of the AllFieldCases type. 
# Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
interface AllFieldCasesInterface {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

# A concrete class that just implements the above interface
type AllFieldCasesInterfaceType implements AllFieldCasesInterface {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

type AllFieldCasesWithIdSubtype {
    id: ID!
    name: String!
}

type AllFieldCasesWithoutIdSubtype {
    name: String!
}

type Human implements Character & Commented &  WithID {
    id: ID!
    name: String!
    bestFriend: Character
    friends: [Character]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}


input HumanInput {
    name: String!
    bestFriend: CharacterInput
    friends: [CharacterInput]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}

type Droid implements Character & WithID{
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}

input DroidInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    primaryFunction: String
}


scalar else

enum extends {
	INT
	DOUBLE
	FLOAT
	LONG
}

input class {
	default: String
}

type break {
	case(test: extends!, if: else): extends
}