package ${package};

import graphql.schema.DataFetchingEnvironment;

/**
 * @author generated by graphql-maven-plugin
 * @See https://github.com/graphql-java-generator/graphql-java-generator
 */
public interface ${dataFetcherDelegate.name} {

#foreach ($dataFetcher in $dataFetcherDelegate.dataFetchers)
	/**
	 * This method loads the data for ${dataFetcher.field.owningType.name}.${dataFetcher.field.name}
	 * <BR/>
	 * Actual execution of the DataFetcher. This is delegated to the developper, as it is not possible to manage every possible use cases.<BR/>
	 * Note: In the future, more and more standard cases will be generated.
	 * 
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher 
#if($dataFetcher.sourceName)
	 * @param source The object from which the field is fetch. It typically contains the id to use in the query.
#end
#foreach($argument in $dataFetcher.field.inputParameters)
	 * @param ${argument.camelCaseName} The input parameter sent in the query by the GraphQL consumer
#end
	 */
	public #if(${dataFetcher.field.list})Iterable<#end${dataFetcher.field.type.classSimpleName}#if(${dataFetcher.field.list})>#end ${dataFetcher.camelCaseName}(DataFetchingEnvironment dataFetchingEnvironment#if($dataFetcher.sourceName), ${dataFetcher.sourceName} source#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.type.classSimpleName} ${argument.camelCaseName}#end);

#end
}
