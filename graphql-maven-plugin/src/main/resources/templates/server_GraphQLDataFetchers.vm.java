package ${package};

import java.util.List;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Component;

import graphql.schema.DataFetcher;

/**
 * @author generated by graphql-maven-plugin
 * @See https://github.com/graphql-java-generator/graphql-java-generator
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LogManager.getLogger();

	@Resource
	GraphQLDataFetchersDelegate dataFetchersDelegate;

#foreach ($dataFetcher in $dataFetchers)

	public DataFetcher<#if(${dataFetcher.field.list})List<#end${dataFetcher.field.type.name}#if(${dataFetcher.field.list})>#end> ${dataFetcher.name}() {
		return dataFetchingEnvironment -> {
#foreach ($argument in $dataFetcher.arguments)
			${argument.type.name} ${argument.nameCamelCase} = dataFetchingEnvironment.getArgument("${argument.name}");
#end

#if (${dataFetcher.field.list})
			List<${dataFetcher.field.type.name}> ret = dataFetchersDelegate.${dataFetcher.name}(#foreach($argument in $dataFetcher.arguments)${argument.nameCamelCase}#if($foreach.hasNext), #end#end);
			logger.debug("${dataFetcher.name}: {} found rows", ret.size());
			return ret;
#else
			${dataFetcher.field.type.name} ret = dataFetchersDelegate.${dataFetcher.name}(#foreach($argument in $dataFetcher.arguments)${argument.nameCamelCase}#if($foreach.hasNext), #end#end);
			logger.debug("${dataFetcher.name}: {} found result", (ret==null)?"no":"1");
			return ret;
#end
		};
	}

#end
}
